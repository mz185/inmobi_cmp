#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
#ifndef INMOBICMP_SWIFT_H
#define INMOBICMP_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="InMobiCMP",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
@class NSString;

SWIFT_CLASS("_TtC9InMobiCMP6ACData")
@interface ACData : NSObject
@property (nonatomic, readonly) BOOL gdprApplies;
@property (nonatomic, readonly, copy) NSString * _Nonnull acString;
@property (nonatomic, readonly, copy) NSDictionary<NSNumber *, NSNumber *> * _Nonnull additionalVendorConsent;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, ActionButtons, open) {
  ActionButtonsAction1 = 1,
  ActionButtonsAction2 = 2,
};



SWIFT_PROTOCOL("_TtP9InMobiCMP12CCPADelegate_")
@protocol CCPADelegate
- (void)didReceiveCCPAConsentWithString:(NSString * _Nonnull)string;
@end

typedef SWIFT_ENUM(NSInteger, CMPUserInterfaceStyle, open) {
  CMPUserInterfaceStyleAuto = 0,
  CMPUserInterfaceStyleLight = 1,
  CMPUserInterfaceStyleDark = 2,
};

@protocol ChoiceCmpDelegate;
@protocol GoogleBasicConsentDelegate;
@class ChoiceStyle;
@class GDPRData;
@class NonIABData;
@class ChoiceGeolocation;
@class PingResponse;

/// Use the class for intialising InMobi CMP, registering delegates and other interactions like showing GDPR, CCPA, MSPA popup etc.
SWIFT_CLASS("_TtC9InMobiCMP9ChoiceCmp")
@interface ChoiceCmp : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ChoiceCmp * _Nonnull shared;)
+ (ChoiceCmp * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (void)setUserLoginOrSubscriptionStatus:(BOOL)value;
/// The <code>sdkVersion</code> property  is used to retrieve the current SDK Version
@property (nonatomic, readonly, copy) NSString * _Nonnull sdkVersion;
/// Call the method to initialise the SDK.
/// The GDPR pop will be shown as a result of this method call if enabled from the portal and the user is in EEA
/// \param pcode Type: <code>String</code>: The unique pcode string
///
/// \param delegate Type: <code>ChoiceCmpDelegate</code>: The object that acts as the delegate to notify the preferences given by the user.
///
/// \param ccpaDelegate Type: <code>CCPADelegate</code>:  The object that acts as the delegate to notify the CCPA preference given by the user.
///
/// \param gbcDelegate Type: <code>GoogleBasicConsentDelegate</code>: The object that acts as the delegate to notify the Google basic consent preferences given by the user.
///
/// \param shouldDisplayIDFA Type: <code>Bool</code>:  Determines whether to show the  IDFA alert to user. The default value is true.
///
/// \param style Type: <code>ChoiceStyle</code>: Provides the flexiblity to customise the consent screens.
///
- (void)startChoiceWithPcode:(NSString * _Nonnull)pcode delegate:(id <ChoiceCmpDelegate> _Nonnull)delegate ccpaDelegate:(id <CCPADelegate> _Nullable)ccpaDelegate gbcDelegate:(id <GoogleBasicConsentDelegate> _Nullable)gbcDelegate shouldDisplayIDFA:(BOOL)shouldDisplayIDFA style:(ChoiceStyle * _Nullable)style;
- (void)forceDisplayUI;
- (void)getTCStringWithCompletion:(void (^ _Nonnull)(NSString * _Nonnull))completion SWIFT_DEPRECATED_MSG("Please use getGDPRData(completion: ) to retrieve the TCString");
- (void)getGPPStringWithCompletion:(void (^ _Nonnull)(NSString * _Nonnull))completion SWIFT_DEPRECATED_MSG("Please use getGDPRData(completion: ) to retrieve the GPP String");
- (void)getGDPRDataWithCompletion:(void (^ _Nonnull)(GDPRData * _Nonnull))completion;
- (NonIABData * _Nullable)getNonIABData SWIFT_WARN_UNUSED_RESULT;
- (ACData * _Nullable)getACData SWIFT_WARN_UNUSED_RESULT;
- (ChoiceGeolocation * _Nullable)getGeolocation SWIFT_WARN_UNUSED_RESULT;
- (PingResponse * _Nonnull)ping SWIFT_WARN_UNUSED_RESULT;
@end





@interface ChoiceCmp (SWIFT_EXTENSION(InMobiCMP))
- (void)startChoiceWithPcode:(NSString * _Nonnull)pcode delegate:(id <ChoiceCmpDelegate> _Nonnull)delegate;
- (void)startChoiceWithPcode:(NSString * _Nonnull)pcode delegate:(id <ChoiceCmpDelegate> _Nonnull)delegate gbcDelegate:(id <GoogleBasicConsentDelegate> _Nonnull)gbcDelegate;
- (void)startChoiceWithPcode:(NSString * _Nonnull)pcode delegate:(id <ChoiceCmpDelegate> _Nonnull)delegate ccpaDelegate:(id <CCPADelegate> _Nonnull)ccpaDelegate;
- (void)startChoiceWithPcode:(NSString * _Nonnull)pcode delegate:(id <ChoiceCmpDelegate> _Nonnull)delegate ccpaDelegate:(id <CCPADelegate> _Nonnull)ccpaDelegate gbcDelegate:(id <GoogleBasicConsentDelegate> _Nonnull)gbcDelegate;
- (void)startChoiceWithPcode:(NSString * _Nonnull)pcode delegate:(id <ChoiceCmpDelegate> _Nonnull)delegate ccpaDelegate:(id <CCPADelegate> _Nonnull)ccpaDelegate shouldDisplayIDFA:(BOOL)shouldDisplayIDFA;
- (void)startChoiceWithPcode:(NSString * _Nonnull)pcode delegate:(id <ChoiceCmpDelegate> _Nonnull)delegate ccpaDelegate:(id <CCPADelegate> _Nonnull)ccpaDelegate gbcDelegate:(id <GoogleBasicConsentDelegate> _Nonnull)gbcDelegate shouldDisplayIDFA:(BOOL)shouldDisplayIDFA;
- (void)startChoiceWithPcode:(NSString * _Nonnull)pcode delegate:(id <ChoiceCmpDelegate> _Nonnull)delegate ccpaDelegate:(id <CCPADelegate> _Nonnull)ccpaDelegate shouldDisplayIDFA:(BOOL)shouldDisplayIDFA style:(ChoiceStyle * _Nonnull)style;
@end



@interface ChoiceCmp (SWIFT_EXTENSION(InMobiCMP))
/// Call the method to show the Google Basic Consent.
/// The GBC consent screen will be shown only if it is enabled for the country.
/// \param delegate Type: <code>GoogleBasicConsentDelegate</code>: The object that acts as the delegate to notify the preferences given by the user.
///
- (void)showGoogleBasicConsentWithDelegate:(id <GoogleBasicConsentDelegate> _Nullable)delegate;
@end



@interface ChoiceCmp (SWIFT_EXTENSION(InMobiCMP))
/// Call the method to show the MSPA screen.
/// The MSPA consent screen will be shown only for US if enabled from the portal. If ‘US privacy for encoding California legislation’ is selected in the portal, then CCPA screen will be displayed
/// \param ccpaDelegate Type: <code>CCPADelegate</code>: The object that acts as the delegate to notify the preferences given by the user.
///
- (void)showUSRegulationsWithCcpaDelegate:(id <CCPADelegate> _Nullable)ccpaDelegate;
/// Call the method to show the CCPA screen.
/// The CCPA consent screen will be shown only for US if enabled from the portal.
/// \param ccpaDelegate Type: <code>CCPADelegate</code>: The object that acts as the delegate to notify the preferences given by the user.
///
- (void)showCCPAWithCcpaDelegate:(id <CCPADelegate> _Nullable)ccpaDelegate SWIFT_DEPRECATED_MSG("Please use showUSRegulations(ccpaDelegate:) to show MSPA/CCPA popup");
/// Call the method to show the CCPA screen.
/// The CCPA consent screen will be shown only for US if enabled from the portal.
/// \param pcode Type: <code>String</code>: The unique pcode string
///
/// \param ccpaDelegate Type: <code>CCPADelegate</code>: The object that acts as the delegate to notify the preferences given by the user.
///
- (void)startCCPAWithPcode:(NSString * _Nonnull)pcode ccpaDelegate:(id <CCPADelegate> _Nullable)ccpaDelegate SWIFT_DEPRECATED_MSG("Please use showUSRegulations(ccpaDelegate:) to show MSPA/CCPA popup");
@end

@class USRegulationsData;
@class DisplayInfo;

SWIFT_PROTOCOL("_TtP9InMobiCMP17ChoiceCmpDelegate_")
@protocol ChoiceCmpDelegate
- (void)cmpDidLoadWithInfo:(PingResponse * _Nonnull)info;
- (void)didReceiveIABVendorConsentWithGdprData:(GDPRData * _Nonnull)gdprData updated:(BOOL)updated;
- (void)didReceiveNonIABVendorConsentWithNonIabData:(NonIABData * _Nonnull)nonIabData updated:(BOOL)updated;
- (void)didReceiveAdditionalConsentWithAcData:(ACData * _Nonnull)acData updated:(BOOL)updated;
- (void)cmpDidErrorWithError:(NSError * _Nonnull)error;
- (void)didReceiveUSRegulationsConsentWithUsRegData:(USRegulationsData * _Nonnull)usRegData;
- (void)didReceiveActionButtonTapWithAction:(enum ActionButtons)action;
/// Delegate triggered when the user performs any action that changes the display status of the popup.
/// \code
///    This function is invoked to notify when there is a change in the display status of the UI, whether it involves
///    showing or dismissing the popup. Additionally, if the popup is not displayed, the callback provides the
///    appropriate reason as it relates to compliance with the regulation
///
/// \endcode
- (void)cmpUIStatusChangedWithInfo:(DisplayInfo * _Nonnull)info;
/// ** The callback will be triggered when user moves to other state  and new regulations are applicable
- (void)userDidMoveToOtherState;
@end


SWIFT_CLASS("_TtC9InMobiCMP11ChoiceColor")
@interface ChoiceColor : NSObject
@property (nonatomic, copy) NSString * _Nullable dividerColor;
@property (nonatomic, copy) NSString * _Nullable tabBackgroundColor;
@property (nonatomic, copy) NSString * _Nullable searchBarBackgroundColor;
@property (nonatomic, copy) NSString * _Nullable searchBarForegroundColor;
@property (nonatomic, copy) NSString * _Nullable infoButtonForegroundColor;
@property (nonatomic, copy) NSString * _Nullable toggleActiveColor;
@property (nonatomic, copy) NSString * _Nullable toggleInactiveColor;
@property (nonatomic, copy) NSString * _Nullable globalBackgroundColor;
@property (nonatomic, copy) NSString * _Nullable titleTextColor;
@property (nonatomic, copy) NSString * _Nullable bodyTextColor;
@property (nonatomic, copy) NSString * _Nullable tabTextColor;
@property (nonatomic, copy) NSString * _Nullable menuTextColor;
@property (nonatomic, copy) NSString * _Nullable linkTextColor;
@property (nonatomic, copy) NSString * _Nullable buttonTextColor;
@property (nonatomic, copy) NSString * _Nullable buttonDisabledTextColor;
@property (nonatomic, copy) NSString * _Nullable buttonBackgroundColor;
@property (nonatomic, copy) NSString * _Nullable buttonDisabledBackgroundColor;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC9InMobiCMP10ChoiceFont")
@interface ChoiceFont : NSObject
@property (nonatomic, copy) NSString * _Nullable fontName;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC9InMobiCMP17ChoiceGeolocation")
@interface ChoiceGeolocation : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull country;
@property (nonatomic, readonly, copy) NSString * _Nonnull region;
@property (nonatomic, readonly, copy) NSString * _Nonnull city;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC9InMobiCMP11ChoiceStyle")
@interface ChoiceStyle : NSObject
@property (nonatomic, strong) ChoiceFont * _Nullable regularFont;
@property (nonatomic, strong) ChoiceFont * _Nullable boldFont;
@property (nonatomic, strong) ChoiceColor * _Nullable lightModeColors;
@property (nonatomic) enum CMPUserInterfaceStyle preferredThemeMode SWIFT_AVAILABILITY(ios,introduced=12.0);
@property (nonatomic, strong) ChoiceColor * _Nullable darkModeColors SWIFT_AVAILABILITY(ios,introduced=12.0);
- (nonnull instancetype)initWithPreferredThemeMode:(enum CMPUserInterfaceStyle)preferredThemeMode lightModeColors:(ChoiceColor * _Nullable)lightModeColors darkModeColors:(ChoiceColor * _Nullable)darkModeColors regularFont:(ChoiceFont * _Nullable)regularFont boldFont:(ChoiceFont * _Nullable)boldFont OBJC_DESIGNATED_INITIALIZER SWIFT_AVAILABILITY(ios,introduced=12.0);
- (nonnull instancetype)initWithLightModeColors:(ChoiceColor * _Nullable)lightModeColors darkModeColors:(ChoiceColor * _Nullable)darkModeColors regularFont:(ChoiceFont * _Nullable)regularFont boldFont:(ChoiceFont * _Nullable)boldFont OBJC_DESIGNATED_INITIALIZER SWIFT_AVAILABILITY(ios,introduced=12.0);
- (nonnull instancetype)initWithLightModeColors:(ChoiceColor * _Nullable)lightModeColors darkModeColors:(ChoiceColor * _Nullable)darkModeColors OBJC_DESIGNATED_INITIALIZER SWIFT_AVAILABILITY(ios,introduced=12.0);
- (nonnull instancetype)initWithLightModeColors:(ChoiceColor * _Nullable)lightModeColors regularFont:(ChoiceFont * _Nullable)regularFont boldFont:(ChoiceFont * _Nullable)boldFont OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithLightModeColors:(ChoiceColor * _Nullable)lightModeColors OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithRegularFont:(ChoiceFont * _Nullable)regularFont boldFont:(ChoiceFont * _Nullable)boldFont OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, CmpStatus, open) {
/// CMP not yet loaded – stub still in place
  CmpStatusStub = 0,
/// CMP is loading
  CmpStatusLoading = 1,
/// CMP is finished loading
  CmpStatusLoaded = 2,
/// CMP is in an error state. A CMP shall not respond to any other API requests if this cmpStatus is present.
/// A CMP may set this status if, for any reason, it is unable to perform the operations in compliance with the TCF.
  CmpStatusError = 3,
};

enum DisplayStatus : NSInteger;
enum Regulations : NSInteger;

/// A class that provides detailed information about the current UI state of the SDK with respect to the regulation.
/// The <code>DisplayInfo</code> class  is used to relay information regarding the
/// current state of the UI, including the status, message, and whether a given UI component is shown.
/// <ul>
///   <li>
///     Properties:
///     <ul>
///       <li>
///         <code>displayStatus</code>: An enum value representing the current display status of the UI.
///       </li>
///       <li>
///         <code>displayMessage</code>: A string containing a message related to the current display status.
///       </li>
///       <li>
///         <code>gbcShown</code>: A Boolean value indicating whether the Google basic consent  is shown.
///       </li>
///     </ul>
///   </li>
/// </ul>
SWIFT_CLASS("_TtC9InMobiCMP11DisplayInfo")
@interface DisplayInfo : NSObject
@property (nonatomic, readonly) enum DisplayStatus displayStatus;
@property (nonatomic, readonly, copy) NSString * _Nonnull displayMessage;
@property (nonatomic, readonly) BOOL gbcShown;
@property (nonatomic, readonly) enum Regulations regulationShown;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, DisplayStatus, open) {
  DisplayStatusVisible = 0,
  DisplayStatusHidden = 1,
  DisplayStatusDisabled = 2,
  DisplayStatusDismissed = 3,
};

typedef SWIFT_ENUM(NSInteger, EventStatus, open) {
/// A CMP is loaded and is prepared to surface a TC String to any calling scripts on the page
  EventStatusTcloaded = 0,
/// The UI is surfaced or re-surfaced
/// And TC String is available and has rendered “Transparency” in accordance with the TCF Policy.
  EventStatusCmpuishown = 1,
/// User has confirmed or re-confirmed their choices in accordance with TCF Policy
/// and a CMP is prepared to respond to any calling scripts with the corresponding TC String.
  EventStatusUseractioncomplete = 2,
};

enum PrivacyEncodingMode : NSInteger;
@class ConsentAndLI;
@class Publisher;

SWIFT_CLASS("_TtC9InMobiCMP8GDPRData")
@interface GDPRData : NSObject
@property (nonatomic, copy) NSString * _Nonnull tcString;
@property (nonatomic, copy) NSString * _Nonnull gppString;
@property (nonatomic, readonly) NSInteger tcfPolicyVersion;
@property (nonatomic) NSInteger cmpId;
@property (nonatomic) NSInteger cmpVersion;
@property (nonatomic, readonly) enum PrivacyEncodingMode privacyEncodingMode;
@property (nonatomic, readonly) BOOL gdprAppliesIsKnown;
@property (nonatomic, readonly) BOOL doesGdprApply;
@property (nonatomic) enum EventStatus eventStatus;
@property (nonatomic) enum CmpStatus cmpStatus;
@property (nonatomic) BOOL isServiceSpecific;
@property (nonatomic) BOOL useNonStandardStacks;
@property (nonatomic, copy) NSString * _Nonnull publisherCC;
@property (nonatomic) BOOL purposeOneTreatment;
@property (nonatomic, strong) ConsentAndLI * _Nonnull purpose;
@property (nonatomic, strong) ConsentAndLI * _Nonnull vendor;
@property (nonatomic, copy) NSDictionary<NSString *, NSNumber *> * _Nonnull specialFeatureOptins;
@property (nonatomic, strong) Publisher * _Nonnull publisher;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtCC9InMobiCMP8GDPRData12ConsentAndLI")
@interface ConsentAndLI : NSObject
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSNumber *> * _Nonnull consents;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSNumber *> * _Nonnull legitimateInterests;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtCC9InMobiCMP8GDPRData9Publisher")
@interface Publisher : NSObject
@property (nonatomic, readonly) NSInteger vendorID;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSNumber *> * _Nonnull consents;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSNumber *> * _Nonnull legitimateInterests;
@property (nonatomic, readonly, strong) ConsentAndLI * _Nonnull customPurpose;
@property (nonatomic, readonly, copy) NSDictionary<NSNumber *, NSDictionary<NSNumber *, NSNumber *> *> * _Nonnull restrictions;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class GoogleBasicConsents;

/// Delegate for communicating the Google basic consent preferences set by user
SWIFT_PROTOCOL("_TtP9InMobiCMP26GoogleBasicConsentDelegate_")
@protocol GoogleBasicConsentDelegate
/// Notifies the delegate that the Google basic consent preferences have been set by the user
- (void)didReceiveGoogleBasicConsentChangeWithConsents:(GoogleBasicConsents * _Nonnull)consents;
@end

typedef SWIFT_ENUM(NSInteger, GoogleBasicConsentValue, open) {
  GoogleBasicConsentValueDenied = 0,
  GoogleBasicConsentValueGranted = 1,
};


SWIFT_CLASS("_TtC9InMobiCMP19GoogleBasicConsents")
@interface GoogleBasicConsents : NSObject
@property (nonatomic) enum GoogleBasicConsentValue adStorage;
@property (nonatomic) enum GoogleBasicConsentValue adUserData;
@property (nonatomic) enum GoogleBasicConsentValue adPersonalization;
@property (nonatomic) enum GoogleBasicConsentValue analyticsStorage;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_CLASS("_TtC9InMobiCMP10NonIABData")
@interface NonIABData : NSObject
@property (nonatomic, readonly) BOOL gdprApplies;
@property (nonatomic, readonly, copy) NSDictionary<NSNumber *, NSNumber *> * _Nonnull nonIabVendorConsents;
@property (nonatomic, readonly, copy) NSString * _Nonnull consent;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC9InMobiCMP12PingResponse")
@interface PingResponse : NSObject
@property (nonatomic, readonly) BOOL gdprAppliesIsKnown;
@property (nonatomic, readonly) BOOL usRegulationApplies;
@property (nonatomic, readonly) BOOL doesGdprApply SWIFT_UNAVAILABLE;
@property (nonatomic, readonly) BOOL cmpLoaded;
@property (nonatomic, readonly) enum CmpStatus cmpStatus;
@property (nonatomic, readonly) enum DisplayStatus displayStatus;
@property (nonatomic, readonly, copy) NSString * _Nonnull apiVersion;
@property (nonatomic, readonly) NSInteger cmpVersion;
@property (nonatomic, readonly) NSInteger cmpId;
@property (nonatomic, readonly) NSInteger gvlVersion;
@property (nonatomic, readonly) NSInteger tcfPolicyVersion;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// An enumeration representing different  GDPR privacy encoding modes.
/// This enumeration defines the possible GDPR privacy encoding modes for data processing.
/// <ul>
///   <li>
///     <code>tcf</code>: Represents encoding mode compliant with the Transparency and Consent Framework (TCF).
///   </li>
///   <li>
///     <code>gpp</code>: Represents encoding mode compliant with the Global Privacy Platform (GPP).
///   </li>
///   <li>
///     <code>tcfAndGpp</code>: Represents encoding mode compliant with both the Transparency and Consent Framework (TCF) and the Global Privacy Platform (GPP).
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSInteger, PrivacyEncodingMode, open) {
  PrivacyEncodingModeTcf = 0,
  PrivacyEncodingModeGpp = 1,
  PrivacyEncodingModeTcfAndGpp = 2,
};

typedef SWIFT_ENUM(NSInteger, Regulations, open) {
  RegulationsGdpr = 0,
  RegulationsMspa = 1,
  RegulationsCcpa = 2,
  RegulationsNa = 3,
};
















SWIFT_CLASS("_TtC9InMobiCMP17USRegulationsData")
@interface USRegulationsData : NSObject
@property (nonatomic) NSInteger Version;
@property (nonatomic, copy) NSString * _Nonnull gppString;
@property (nonatomic) NSInteger SharingNotice;
@property (nonatomic) NSInteger SaleOptOutNotice;
@property (nonatomic) NSInteger SharingOptOutNotice;
@property (nonatomic) NSInteger TargetedAdvertisingOptOutNotice;
@property (nonatomic) NSInteger SensitiveDataProcessingOptOutNotice;
@property (nonatomic) NSInteger SensitiveDataLimitUseNotice;
@property (nonatomic) NSInteger SaleOptOut;
@property (nonatomic) NSInteger SharingOptOut;
@property (nonatomic) NSInteger TargetedAdvertisingOptOut;
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull SensitiveDataProcessing;
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull KnownChildSensitiveDataConsents;
@property (nonatomic) NSInteger PersonalDataConsents;
@property (nonatomic) NSInteger MspaCoveredTransaction;
@property (nonatomic) NSInteger MspaOptOutOptionMode;
@property (nonatomic) NSInteger MspaServiceProviderMode;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
#ifndef INMOBICMP_SWIFT_H
#define INMOBICMP_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="InMobiCMP",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
@class NSString;

SWIFT_CLASS("_TtC9InMobiCMP6ACData")
@interface ACData : NSObject
@property (nonatomic, readonly) BOOL gdprApplies;
@property (nonatomic, readonly, copy) NSString * _Nonnull acString;
@property (nonatomic, readonly, copy) NSDictionary<NSNumber *, NSNumber *> * _Nonnull additionalVendorConsent;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, ActionButtons, open) {
  ActionButtonsAction1 = 1,
  ActionButtonsAction2 = 2,
};



SWIFT_PROTOCOL("_TtP9InMobiCMP12CCPADelegate_")
@protocol CCPADelegate
- (void)didReceiveCCPAConsentWithString:(NSString * _Nonnull)string;
@end

typedef SWIFT_ENUM(NSInteger, CMPUserInterfaceStyle, open) {
  CMPUserInterfaceStyleAuto = 0,
  CMPUserInterfaceStyleLight = 1,
  CMPUserInterfaceStyleDark = 2,
};

@protocol ChoiceCmpDelegate;
@protocol GoogleBasicConsentDelegate;
@class ChoiceStyle;
@class GDPRData;
@class NonIABData;
@class ChoiceGeolocation;
@class PingResponse;

/// Use the class for intialising InMobi CMP, registering delegates and other interactions like showing GDPR, CCPA, MSPA popup etc.
SWIFT_CLASS("_TtC9InMobiCMP9ChoiceCmp")
@interface ChoiceCmp : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ChoiceCmp * _Nonnull shared;)
+ (ChoiceCmp * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (void)setUserLoginOrSubscriptionStatus:(BOOL)value;
/// The <code>sdkVersion</code> property  is used to retrieve the current SDK Version
@property (nonatomic, readonly, copy) NSString * _Nonnull sdkVersion;
/// Call the method to initialise the SDK.
/// The GDPR pop will be shown as a result of this method call if enabled from the portal and the user is in EEA
/// \param pcode Type: <code>String</code>: The unique pcode string
///
/// \param delegate Type: <code>ChoiceCmpDelegate</code>: The object that acts as the delegate to notify the preferences given by the user.
///
/// \param ccpaDelegate Type: <code>CCPADelegate</code>:  The object that acts as the delegate to notify the CCPA preference given by the user.
///
/// \param gbcDelegate Type: <code>GoogleBasicConsentDelegate</code>: The object that acts as the delegate to notify the Google basic consent preferences given by the user.
///
/// \param shouldDisplayIDFA Type: <code>Bool</code>:  Determines whether to show the  IDFA alert to user. The default value is true.
///
/// \param style Type: <code>ChoiceStyle</code>: Provides the flexiblity to customise the consent screens.
///
- (void)startChoiceWithPcode:(NSString * _Nonnull)pcode delegate:(id <ChoiceCmpDelegate> _Nonnull)delegate ccpaDelegate:(id <CCPADelegate> _Nullable)ccpaDelegate gbcDelegate:(id <GoogleBasicConsentDelegate> _Nullable)gbcDelegate shouldDisplayIDFA:(BOOL)shouldDisplayIDFA style:(ChoiceStyle * _Nullable)style;
- (void)forceDisplayUI;
- (void)getTCStringWithCompletion:(void (^ _Nonnull)(NSString * _Nonnull))completion SWIFT_DEPRECATED_MSG("Please use getGDPRData(completion: ) to retrieve the TCString");
- (void)getGPPStringWithCompletion:(void (^ _Nonnull)(NSString * _Nonnull))completion SWIFT_DEPRECATED_MSG("Please use getGDPRData(completion: ) to retrieve the GPP String");
- (void)getGDPRDataWithCompletion:(void (^ _Nonnull)(GDPRData * _Nonnull))completion;
- (NonIABData * _Nullable)getNonIABData SWIFT_WARN_UNUSED_RESULT;
- (ACData * _Nullable)getACData SWIFT_WARN_UNUSED_RESULT;
- (ChoiceGeolocation * _Nullable)getGeolocation SWIFT_WARN_UNUSED_RESULT;
- (PingResponse * _Nonnull)ping SWIFT_WARN_UNUSED_RESULT;
@end





@interface ChoiceCmp (SWIFT_EXTENSION(InMobiCMP))
- (void)startChoiceWithPcode:(NSString * _Nonnull)pcode delegate:(id <ChoiceCmpDelegate> _Nonnull)delegate;
- (void)startChoiceWithPcode:(NSString * _Nonnull)pcode delegate:(id <ChoiceCmpDelegate> _Nonnull)delegate gbcDelegate:(id <GoogleBasicConsentDelegate> _Nonnull)gbcDelegate;
- (void)startChoiceWithPcode:(NSString * _Nonnull)pcode delegate:(id <ChoiceCmpDelegate> _Nonnull)delegate ccpaDelegate:(id <CCPADelegate> _Nonnull)ccpaDelegate;
- (void)startChoiceWithPcode:(NSString * _Nonnull)pcode delegate:(id <ChoiceCmpDelegate> _Nonnull)delegate ccpaDelegate:(id <CCPADelegate> _Nonnull)ccpaDelegate gbcDelegate:(id <GoogleBasicConsentDelegate> _Nonnull)gbcDelegate;
- (void)startChoiceWithPcode:(NSString * _Nonnull)pcode delegate:(id <ChoiceCmpDelegate> _Nonnull)delegate ccpaDelegate:(id <CCPADelegate> _Nonnull)ccpaDelegate shouldDisplayIDFA:(BOOL)shouldDisplayIDFA;
- (void)startChoiceWithPcode:(NSString * _Nonnull)pcode delegate:(id <ChoiceCmpDelegate> _Nonnull)delegate ccpaDelegate:(id <CCPADelegate> _Nonnull)ccpaDelegate gbcDelegate:(id <GoogleBasicConsentDelegate> _Nonnull)gbcDelegate shouldDisplayIDFA:(BOOL)shouldDisplayIDFA;
- (void)startChoiceWithPcode:(NSString * _Nonnull)pcode delegate:(id <ChoiceCmpDelegate> _Nonnull)delegate ccpaDelegate:(id <CCPADelegate> _Nonnull)ccpaDelegate shouldDisplayIDFA:(BOOL)shouldDisplayIDFA style:(ChoiceStyle * _Nonnull)style;
@end



@interface ChoiceCmp (SWIFT_EXTENSION(InMobiCMP))
/// Call the method to show the Google Basic Consent.
/// The GBC consent screen will be shown only if it is enabled for the country.
/// \param delegate Type: <code>GoogleBasicConsentDelegate</code>: The object that acts as the delegate to notify the preferences given by the user.
///
- (void)showGoogleBasicConsentWithDelegate:(id <GoogleBasicConsentDelegate> _Nullable)delegate;
@end



@interface ChoiceCmp (SWIFT_EXTENSION(InMobiCMP))
/// Call the method to show the MSPA screen.
/// The MSPA consent screen will be shown only for US if enabled from the portal. If ‘US privacy for encoding California legislation’ is selected in the portal, then CCPA screen will be displayed
/// \param ccpaDelegate Type: <code>CCPADelegate</code>: The object that acts as the delegate to notify the preferences given by the user.
///
- (void)showUSRegulationsWithCcpaDelegate:(id <CCPADelegate> _Nullable)ccpaDelegate;
/// Call the method to show the CCPA screen.
/// The CCPA consent screen will be shown only for US if enabled from the portal.
/// \param ccpaDelegate Type: <code>CCPADelegate</code>: The object that acts as the delegate to notify the preferences given by the user.
///
- (void)showCCPAWithCcpaDelegate:(id <CCPADelegate> _Nullable)ccpaDelegate SWIFT_DEPRECATED_MSG("Please use showUSRegulations(ccpaDelegate:) to show MSPA/CCPA popup");
/// Call the method to show the CCPA screen.
/// The CCPA consent screen will be shown only for US if enabled from the portal.
/// \param pcode Type: <code>String</code>: The unique pcode string
///
/// \param ccpaDelegate Type: <code>CCPADelegate</code>: The object that acts as the delegate to notify the preferences given by the user.
///
- (void)startCCPAWithPcode:(NSString * _Nonnull)pcode ccpaDelegate:(id <CCPADelegate> _Nullable)ccpaDelegate SWIFT_DEPRECATED_MSG("Please use showUSRegulations(ccpaDelegate:) to show MSPA/CCPA popup");
@end

@class USRegulationsData;
@class DisplayInfo;

SWIFT_PROTOCOL("_TtP9InMobiCMP17ChoiceCmpDelegate_")
@protocol ChoiceCmpDelegate
- (void)cmpDidLoadWithInfo:(PingResponse * _Nonnull)info;
- (void)didReceiveIABVendorConsentWithGdprData:(GDPRData * _Nonnull)gdprData updated:(BOOL)updated;
- (void)didReceiveNonIABVendorConsentWithNonIabData:(NonIABData * _Nonnull)nonIabData updated:(BOOL)updated;
- (void)didReceiveAdditionalConsentWithAcData:(ACData * _Nonnull)acData updated:(BOOL)updated;
- (void)cmpDidErrorWithError:(NSError * _Nonnull)error;
- (void)didReceiveUSRegulationsConsentWithUsRegData:(USRegulationsData * _Nonnull)usRegData;
- (void)didReceiveActionButtonTapWithAction:(enum ActionButtons)action;
/// Delegate triggered when the user performs any action that changes the display status of the popup.
/// \code
///    This function is invoked to notify when there is a change in the display status of the UI, whether it involves
///    showing or dismissing the popup. Additionally, if the popup is not displayed, the callback provides the
///    appropriate reason as it relates to compliance with the regulation
///
/// \endcode
- (void)cmpUIStatusChangedWithInfo:(DisplayInfo * _Nonnull)info;
/// ** The callback will be triggered when user moves to other state  and new regulations are applicable
- (void)userDidMoveToOtherState;
@end


SWIFT_CLASS("_TtC9InMobiCMP11ChoiceColor")
@interface ChoiceColor : NSObject
@property (nonatomic, copy) NSString * _Nullable dividerColor;
@property (nonatomic, copy) NSString * _Nullable tabBackgroundColor;
@property (nonatomic, copy) NSString * _Nullable searchBarBackgroundColor;
@property (nonatomic, copy) NSString * _Nullable searchBarForegroundColor;
@property (nonatomic, copy) NSString * _Nullable infoButtonForegroundColor;
@property (nonatomic, copy) NSString * _Nullable toggleActiveColor;
@property (nonatomic, copy) NSString * _Nullable toggleInactiveColor;
@property (nonatomic, copy) NSString * _Nullable globalBackgroundColor;
@property (nonatomic, copy) NSString * _Nullable titleTextColor;
@property (nonatomic, copy) NSString * _Nullable bodyTextColor;
@property (nonatomic, copy) NSString * _Nullable tabTextColor;
@property (nonatomic, copy) NSString * _Nullable menuTextColor;
@property (nonatomic, copy) NSString * _Nullable linkTextColor;
@property (nonatomic, copy) NSString * _Nullable buttonTextColor;
@property (nonatomic, copy) NSString * _Nullable buttonDisabledTextColor;
@property (nonatomic, copy) NSString * _Nullable buttonBackgroundColor;
@property (nonatomic, copy) NSString * _Nullable buttonDisabledBackgroundColor;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC9InMobiCMP10ChoiceFont")
@interface ChoiceFont : NSObject
@property (nonatomic, copy) NSString * _Nullable fontName;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC9InMobiCMP17ChoiceGeolocation")
@interface ChoiceGeolocation : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull country;
@property (nonatomic, readonly, copy) NSString * _Nonnull region;
@property (nonatomic, readonly, copy) NSString * _Nonnull city;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC9InMobiCMP11ChoiceStyle")
@interface ChoiceStyle : NSObject
@property (nonatomic, strong) ChoiceFont * _Nullable regularFont;
@property (nonatomic, strong) ChoiceFont * _Nullable boldFont;
@property (nonatomic, strong) ChoiceColor * _Nullable lightModeColors;
@property (nonatomic) enum CMPUserInterfaceStyle preferredThemeMode SWIFT_AVAILABILITY(ios,introduced=12.0);
@property (nonatomic, strong) ChoiceColor * _Nullable darkModeColors SWIFT_AVAILABILITY(ios,introduced=12.0);
- (nonnull instancetype)initWithPreferredThemeMode:(enum CMPUserInterfaceStyle)preferredThemeMode lightModeColors:(ChoiceColor * _Nullable)lightModeColors darkModeColors:(ChoiceColor * _Nullable)darkModeColors regularFont:(ChoiceFont * _Nullable)regularFont boldFont:(ChoiceFont * _Nullable)boldFont OBJC_DESIGNATED_INITIALIZER SWIFT_AVAILABILITY(ios,introduced=12.0);
- (nonnull instancetype)initWithLightModeColors:(ChoiceColor * _Nullable)lightModeColors darkModeColors:(ChoiceColor * _Nullable)darkModeColors regularFont:(ChoiceFont * _Nullable)regularFont boldFont:(ChoiceFont * _Nullable)boldFont OBJC_DESIGNATED_INITIALIZER SWIFT_AVAILABILITY(ios,introduced=12.0);
- (nonnull instancetype)initWithLightModeColors:(ChoiceColor * _Nullable)lightModeColors darkModeColors:(ChoiceColor * _Nullable)darkModeColors OBJC_DESIGNATED_INITIALIZER SWIFT_AVAILABILITY(ios,introduced=12.0);
- (nonnull instancetype)initWithLightModeColors:(ChoiceColor * _Nullable)lightModeColors regularFont:(ChoiceFont * _Nullable)regularFont boldFont:(ChoiceFont * _Nullable)boldFont OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithLightModeColors:(ChoiceColor * _Nullable)lightModeColors OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithRegularFont:(ChoiceFont * _Nullable)regularFont boldFont:(ChoiceFont * _Nullable)boldFont OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, CmpStatus, open) {
/// CMP not yet loaded – stub still in place
  CmpStatusStub = 0,
/// CMP is loading
  CmpStatusLoading = 1,
/// CMP is finished loading
  CmpStatusLoaded = 2,
/// CMP is in an error state. A CMP shall not respond to any other API requests if this cmpStatus is present.
/// A CMP may set this status if, for any reason, it is unable to perform the operations in compliance with the TCF.
  CmpStatusError = 3,
};

enum DisplayStatus : NSInteger;
enum Regulations : NSInteger;

/// A class that provides detailed information about the current UI state of the SDK with respect to the regulation.
/// The <code>DisplayInfo</code> class  is used to relay information regarding the
/// current state of the UI, including the status, message, and whether a given UI component is shown.
/// <ul>
///   <li>
///     Properties:
///     <ul>
///       <li>
///         <code>displayStatus</code>: An enum value representing the current display status of the UI.
///       </li>
///       <li>
///         <code>displayMessage</code>: A string containing a message related to the current display status.
///       </li>
///       <li>
///         <code>gbcShown</code>: A Boolean value indicating whether the Google basic consent  is shown.
///       </li>
///     </ul>
///   </li>
/// </ul>
SWIFT_CLASS("_TtC9InMobiCMP11DisplayInfo")
@interface DisplayInfo : NSObject
@property (nonatomic, readonly) enum DisplayStatus displayStatus;
@property (nonatomic, readonly, copy) NSString * _Nonnull displayMessage;
@property (nonatomic, readonly) BOOL gbcShown;
@property (nonatomic, readonly) enum Regulations regulationShown;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, DisplayStatus, open) {
  DisplayStatusVisible = 0,
  DisplayStatusHidden = 1,
  DisplayStatusDisabled = 2,
  DisplayStatusDismissed = 3,
};

typedef SWIFT_ENUM(NSInteger, EventStatus, open) {
/// A CMP is loaded and is prepared to surface a TC String to any calling scripts on the page
  EventStatusTcloaded = 0,
/// The UI is surfaced or re-surfaced
/// And TC String is available and has rendered “Transparency” in accordance with the TCF Policy.
  EventStatusCmpuishown = 1,
/// User has confirmed or re-confirmed their choices in accordance with TCF Policy
/// and a CMP is prepared to respond to any calling scripts with the corresponding TC String.
  EventStatusUseractioncomplete = 2,
};

enum PrivacyEncodingMode : NSInteger;
@class ConsentAndLI;
@class Publisher;

SWIFT_CLASS("_TtC9InMobiCMP8GDPRData")
@interface GDPRData : NSObject
@property (nonatomic, copy) NSString * _Nonnull tcString;
@property (nonatomic, copy) NSString * _Nonnull gppString;
@property (nonatomic, readonly) NSInteger tcfPolicyVersion;
@property (nonatomic) NSInteger cmpId;
@property (nonatomic) NSInteger cmpVersion;
@property (nonatomic, readonly) enum PrivacyEncodingMode privacyEncodingMode;
@property (nonatomic, readonly) BOOL gdprAppliesIsKnown;
@property (nonatomic, readonly) BOOL doesGdprApply;
@property (nonatomic) enum EventStatus eventStatus;
@property (nonatomic) enum CmpStatus cmpStatus;
@property (nonatomic) BOOL isServiceSpecific;
@property (nonatomic) BOOL useNonStandardStacks;
@property (nonatomic, copy) NSString * _Nonnull publisherCC;
@property (nonatomic) BOOL purposeOneTreatment;
@property (nonatomic, strong) ConsentAndLI * _Nonnull purpose;
@property (nonatomic, strong) ConsentAndLI * _Nonnull vendor;
@property (nonatomic, copy) NSDictionary<NSString *, NSNumber *> * _Nonnull specialFeatureOptins;
@property (nonatomic, strong) Publisher * _Nonnull publisher;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtCC9InMobiCMP8GDPRData12ConsentAndLI")
@interface ConsentAndLI : NSObject
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSNumber *> * _Nonnull consents;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSNumber *> * _Nonnull legitimateInterests;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtCC9InMobiCMP8GDPRData9Publisher")
@interface Publisher : NSObject
@property (nonatomic, readonly) NSInteger vendorID;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSNumber *> * _Nonnull consents;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSNumber *> * _Nonnull legitimateInterests;
@property (nonatomic, readonly, strong) ConsentAndLI * _Nonnull customPurpose;
@property (nonatomic, readonly, copy) NSDictionary<NSNumber *, NSDictionary<NSNumber *, NSNumber *> *> * _Nonnull restrictions;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class GoogleBasicConsents;

/// Delegate for communicating the Google basic consent preferences set by user
SWIFT_PROTOCOL("_TtP9InMobiCMP26GoogleBasicConsentDelegate_")
@protocol GoogleBasicConsentDelegate
/// Notifies the delegate that the Google basic consent preferences have been set by the user
- (void)didReceiveGoogleBasicConsentChangeWithConsents:(GoogleBasicConsents * _Nonnull)consents;
@end

typedef SWIFT_ENUM(NSInteger, GoogleBasicConsentValue, open) {
  GoogleBasicConsentValueDenied = 0,
  GoogleBasicConsentValueGranted = 1,
};


SWIFT_CLASS("_TtC9InMobiCMP19GoogleBasicConsents")
@interface GoogleBasicConsents : NSObject
@property (nonatomic) enum GoogleBasicConsentValue adStorage;
@property (nonatomic) enum GoogleBasicConsentValue adUserData;
@property (nonatomic) enum GoogleBasicConsentValue adPersonalization;
@property (nonatomic) enum GoogleBasicConsentValue analyticsStorage;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_CLASS("_TtC9InMobiCMP10NonIABData")
@interface NonIABData : NSObject
@property (nonatomic, readonly) BOOL gdprApplies;
@property (nonatomic, readonly, copy) NSDictionary<NSNumber *, NSNumber *> * _Nonnull nonIabVendorConsents;
@property (nonatomic, readonly, copy) NSString * _Nonnull consent;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC9InMobiCMP12PingResponse")
@interface PingResponse : NSObject
@property (nonatomic, readonly) BOOL gdprAppliesIsKnown;
@property (nonatomic, readonly) BOOL usRegulationApplies;
@property (nonatomic, readonly) BOOL doesGdprApply SWIFT_UNAVAILABLE;
@property (nonatomic, readonly) BOOL cmpLoaded;
@property (nonatomic, readonly) enum CmpStatus cmpStatus;
@property (nonatomic, readonly) enum DisplayStatus displayStatus;
@property (nonatomic, readonly, copy) NSString * _Nonnull apiVersion;
@property (nonatomic, readonly) NSInteger cmpVersion;
@property (nonatomic, readonly) NSInteger cmpId;
@property (nonatomic, readonly) NSInteger gvlVersion;
@property (nonatomic, readonly) NSInteger tcfPolicyVersion;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// An enumeration representing different  GDPR privacy encoding modes.
/// This enumeration defines the possible GDPR privacy encoding modes for data processing.
/// <ul>
///   <li>
///     <code>tcf</code>: Represents encoding mode compliant with the Transparency and Consent Framework (TCF).
///   </li>
///   <li>
///     <code>gpp</code>: Represents encoding mode compliant with the Global Privacy Platform (GPP).
///   </li>
///   <li>
///     <code>tcfAndGpp</code>: Represents encoding mode compliant with both the Transparency and Consent Framework (TCF) and the Global Privacy Platform (GPP).
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSInteger, PrivacyEncodingMode, open) {
  PrivacyEncodingModeTcf = 0,
  PrivacyEncodingModeGpp = 1,
  PrivacyEncodingModeTcfAndGpp = 2,
};

typedef SWIFT_ENUM(NSInteger, Regulations, open) {
  RegulationsGdpr = 0,
  RegulationsMspa = 1,
  RegulationsCcpa = 2,
  RegulationsNa = 3,
};
















SWIFT_CLASS("_TtC9InMobiCMP17USRegulationsData")
@interface USRegulationsData : NSObject
@property (nonatomic) NSInteger Version;
@property (nonatomic, copy) NSString * _Nonnull gppString;
@property (nonatomic) NSInteger SharingNotice;
@property (nonatomic) NSInteger SaleOptOutNotice;
@property (nonatomic) NSInteger SharingOptOutNotice;
@property (nonatomic) NSInteger TargetedAdvertisingOptOutNotice;
@property (nonatomic) NSInteger SensitiveDataProcessingOptOutNotice;
@property (nonatomic) NSInteger SensitiveDataLimitUseNotice;
@property (nonatomic) NSInteger SaleOptOut;
@property (nonatomic) NSInteger SharingOptOut;
@property (nonatomic) NSInteger TargetedAdvertisingOptOut;
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull SensitiveDataProcessing;
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull KnownChildSensitiveDataConsents;
@property (nonatomic) NSInteger PersonalDataConsents;
@property (nonatomic) NSInteger MspaCoveredTransaction;
@property (nonatomic) NSInteger MspaOptOutOptionMode;
@property (nonatomic) NSInteger MspaServiceProviderMode;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
